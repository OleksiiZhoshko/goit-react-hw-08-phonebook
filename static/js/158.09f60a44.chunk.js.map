{"version":3,"file":"static/js/158.09f60a44.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/contactsForm/contactsForm.module.css?ccbc","../node_modules/nanoid/index.browser.js","Redux/selector.js","components/contactsForm/contactsForm.js","webpack://react-homework-template/./src/components/contactsList/contactsList.module.css?93ec","components/contactsList/contactsList.js","webpack://react-homework-template/./src/components/сontactsFilter/contactsFilter.module.css?428f","components/сontactsFilter/contactsFilter.js","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"contactsForm_wrapper__EKB61\",\"wrapper__name\":\"contactsForm_wrapper__name__Ng7G8\",\"input__name\":\"contactsForm_input__name__+b+43\",\"input__namber\":\"contactsForm_input__namber__hHi9z\",\"button\":\"contactsForm_button__HaOVu\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import React from 'react';\nimport css from './contactsForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'Redux/selector';\nimport { addContacts} from 'Redux/operations';\n\nconst PhoneBook = () => {\n  const dispatch = useDispatch();\n\n  const contactsValue = useSelector(selectContacts);\n\n  const hendleCenge = event => {\n    event.preventDefault();\n    const { name, number } = event.target.elements;\n    // const contacts = { id: nanoid(6), name: name.value, number: number.value };\n    if (contactsValue.some(contact => contact.name === name.value)) {\n      alert(`Sorry, ${name.value} is already in contacts.`);\n      name.value = '';\n      number.value = '';\n      return;\n    }\n    dispatch(addContacts({id: nanoid(6), name: name.value, number: number.value}));\n    name.value = '';\n    number.value = '';\n  };\n\n  return (\n    <form className={css.wrapper} onSubmit={hendleCenge}>\n      <label className={css.wrapper__name}>\n        Name\n        <input\n          className={css.input__name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.wrapper__name}>\n        Number\n        <input\n          className={css.input__namber}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={css.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default PhoneBook;\n","// extracted by mini-css-extract-plugin\nexport default {\"box\":\"contactsList_box__eWr6h\",\"list\":\"contactsList_list__1yWBb\",\"button\":\"contactsList_button__iD5AT\"};","import React from 'react';\nimport css from './contactsList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'Redux/selector';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'Redux/operations';\n\nconst Contacts = () => {\n    const contacts = useSelector(selectFilteredContacts)\n    const dispatch = useDispatch();\n    return (\n      <ul className={css.box}>\n        {contacts.map(({ id, name, number }) => (\n          <li className={css.list} key={id}>\n            <p>{name}:</p>\n            <p>{number}</p>\n            <button\n              className={css.button}\n              type=\"button\"\n              onClick={() => {\n                dispatch(deleteContact(id));\n              }}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    );\n};\n\nexport default Contacts;","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"contactsFilter_filter__k36Wk\",\"filter__input\":\"contactsFilter_filter__input__B5A+s\"};","import css from \"./contactsFilter.module.css\";\nimport { setFilterValue } from \"Redux/filterSlise\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst Filter = () => {\n  const dispatch = useDispatch()\n  const filter = useSelector(state => state.filter);\n  return(<label className={css.filter} htmlFor=\"\">\n    Find contacts by name:\n    <input className={css.filter__input} type=\"text\" value={filter} onChange={(e) => {\n      dispatch(setFilterValue(e.target.value))\n    }} />\n  </label>\n)};\n\nexport default Filter;","import PhoneBook from '../components/contactsForm/contactsForm';\nimport Comtacts from '../components/./contactsList/contactsList';\nimport Filter from '../components/./сontactsFilter/contactsFilter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'Redux/operations';\nimport { Loader } from '../components/./loader/loader';\nimport { selectIsLoading } from 'Redux/selector';\nimport { selectError } from 'Redux/selector';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <h1>Phone book</h1>\n\n      <PhoneBook/>\n\n      <h2>Contacts</h2>\n\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <Comtacts/>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","normalizedFilter","toLowerCase","trim","contact","name","includes","dispatch","useDispatch","contactsValue","useSelector","className","css","onSubmit","event","preventDefault","target","elements","number","some","value","alert","addContacts","type","pattern","title","required","map","onClick","deleteContact","htmlFor","onChange","e","setFilterValue","useEffect","fetchContacts"],"sourceRoot":""}